#!/usr/bin/env python3

import tf
from tf2_msgs.msg import TFMessage
import rospy
import actionlib
from move_base_msgs.msg import MoveBaseGoal,MoveBaseAction
q = tf.transformations.quaternion_from_euler(0,0,-90)

def movebase_client():
    client = actionlib.SimpleActionClient('move_base',MoveBaseAction)
    client.wait_for_server()

    goal = MoveBaseGoal()

    
    goal.target_pose.header.frame_id = "nav_goal"
    goal.target_pose.header.stamp = rospy.Time.now()

    goal.target_pose.pose.position.x = 0
    goal.target_pose.pose.position.y = 0
    goal.target_pose.pose.position.z = 0

    goal.target_pose.pose.orientation.x = 0
    goal.target_pose.pose.orientation.y = 0
    goal.target_pose.pose.orientation.z = 0
    goal.target_pose.pose.orientation.w = 1


    client.send_goal(goal)

    wait = client.wait_for_result()

    goal = MoveBaseGoal()

    
    goal.target_pose.header.frame_id = "nav_goal2"
    goal.target_pose.header.stamp = rospy.Time.now()

    goal.target_pose.pose.position.x = 0
    goal.target_pose.pose.position.y = 0
    goal.target_pose.pose.position.z = 0

    goal.target_pose.pose.orientation.x = 0
    goal.target_pose.pose.orientation.y = 0
    goal.target_pose.pose.orientation.z = 0
    goal.target_pose.pose.orientation.w = 1


    client.send_goal(goal)

    wait = client.wait_for_result()


    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available!")
    else:
        return client.get_result()



if __name__ == '__main__':
    try:
        rospy.init_node('movebase_client_py')

        
        result = movebase_client()
        result2 = movebase_client2()
        if result:
            rospy.loginfo("Goal execution done!")
        if result:
            rospy.loginfo("Goal execution done!")
        
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation test finished.")